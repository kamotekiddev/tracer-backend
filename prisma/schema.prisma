// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  firstName  String
  middleName String?
  lastName   String
  email      String   @unique
  password   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  sessions Session[]

  ownedProjects    Project[]      @relation("owner")
  projectsAsMember Project[]      @relation("member")
  reportedIssues   Issue[]        @relation("my_reported_issues")
  assignedIssues   Issue[]        @relation("assigned_issues")
  issueHistory     IssueHistory[]
  issueComments    IssueComment[]
}

model Session {
  id           String   @id @default(uuid())
  userId       String
  expires      DateTime
  refreshToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model Project {
  id          String   @id @default(uuid())
  name        String   @unique
  key         String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  ownerId    String
  owner      User       @relation("owner", fields: [ownerId], references: [id])
  members    User[]     @relation("member")
  categories Category[]
  sprints    Sprint[]   @relation("project_sprints")
  issues     Issue[]

  currentSprint   Sprint? @relation(fields: [currentSprintId], references: [id])
  currentSprintId String?
}

model Sprint {
  id        String   @id @default(uuid())
  number    Int
  startDate DateTime @default(now())
  endDate   DateTime
  completed Boolean  @default(false)

  projectId String
  project   Project @relation("project_sprints", fields: [projectId], references: [id])

  issues        Issue[]
  projectSprint Project[]
}

model Category {
  id   String @id @default(uuid())
  name String

  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  issues Issue[]
}

enum IssueType {
  BUG
  STORY
  TASK
}

model Issue {
  id          String    @id @default(uuid())
  summary     String
  description String?
  type        IssueType
  number      Int       @default(autoincrement())

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  createdAt DateTime @default(now())
  updated   DateTime @updatedAt

  reporterId String
  reporter   User   @relation("my_reported_issues", fields: [reporterId], references: [id])

  assigneeId String?
  assignee   User?   @relation("assigned_issues", fields: [assigneeId], references: [id])

  sprint   Sprint? @relation(fields: [sprintId], references: [id])
  sprintId String?

  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?

  history  IssueHistory[]
  comments IssueComment[]
}

enum IssueEvent {
  SUMMARY_CHANGE
  DESCRIPTION_CHANGE
  TYPE_CHANGE
  CATEGORY_CHANGE
  ASSIGNEE_CHANGE
  SPRINT_CHANGE
}

model IssueHistory {
  id        String     @id @default(uuid())
  event     IssueEvent
  oldData   String
  changes   String
  createdAt DateTime   @default(now())
  updated   DateTime   @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])

  issueId String
  issue   Issue  @relation(fields: [issueId], references: [id])
}

model IssueComment {
  id     String   @id @default(uuid())
  text   String?
  photos String[]

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  issueId String
  issue   Issue  @relation(fields: [issueId], references: [id])
}
